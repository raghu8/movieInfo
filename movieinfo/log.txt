import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.DecryptionFailureException;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;
import software.amazon.awssdk.services.secretsmanager.model.InternalServiceErrorException;
import software.amazon.awssdk.services.secretsmanager.model.InvalidParameterException;
import software.amazon.awssdk.services.secretsmanager.model.InvalidRequestException;
import software.amazon.awssdk.services.secretsmanager.model.ResourceNotFoundException;
import java.util.Base64;

public class SecretsManagerService {

    private static final String awsRegionStatic = "us-west-2"; // Replace with your region
    private static final String awsSecretNameStatic = "your-secret-name"; // Replace with your secret name

    public static JsonNode retrieveSecrets(String versionId) {

        JsonNode secretsJsonMap = null;
        GetSecretValueRequest getSecretValueRequest;
        GetSecretValueResponse getSecretValueResponse;
        String secretsStr = null;

        // 1. Create Secrets Manager client
        SecretsManagerClient client = SecretsManagerClient.builder()
                .region(Region.of(awsRegionStatic))
                .build();

        // 2. Build request
        if (versionId != null && !versionId.isEmpty()) {
            getSecretValueRequest = GetSecretValueRequest.builder()
                    .secretId(awsSecretNameStatic)
                    .versionId(versionId)
                    .build();
        } else {
            // Get current version
            getSecretValueRequest = GetSecretValueRequest.builder()
                    .secretId(awsSecretNameStatic)
                    .build();
        }

        // 3. Invoke and handle potential exceptions
        try {
            getSecretValueResponse = client.getSecretValue(getSecretValueRequest);

            // 4. Process Results
            if (getSecretValueResponse.secretString() != null) {
                secretsStr = getSecretValueResponse.secretString();
            } else {
                // Decrypts binary secret using the associated KMS key.
                secretsStr = new String(Base64.getDecoder().decode(getSecretValueResponse.secretBinary().asByteArray()));
            }

            ObjectMapper objectMapper = new ObjectMapper();
            if (secretsStr != null && !secretsStr.isEmpty()) {
                secretsJsonMap = objectMapper.readTree(secretsStr);

                String outVersionId = getSecretValueResponse.versionId();
                if (outVersionId != null && !outVersionId.isEmpty()) {
                    ((ObjectNode) secretsJsonMap).put("versionId", outVersionId);
                }
            } else {
                System.err.println("The Secret String returned is null");
            }

        } catch (DecryptionFailureException e) {
            // Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            throw new RuntimeException("Decryption failure", e);
        } catch (InternalServiceErrorException e) {
            // An error occurred on the server side.
            throw new RuntimeException("Internal service error", e);
        } catch (InvalidParameterException e) {
            // You provided an invalid value for a parameter.
            throw new RuntimeException("Invalid parameter", e);
        } catch (InvalidRequestException e) {
            // You provided a parameter value that is not valid for the current state of the resource.
            throw new RuntimeException("Invalid request", e);
        } catch (ResourceNotFoundException e) {
            // We can't find the resource that you asked for.
            throw new RuntimeException("Resource not found", e);
        } catch (Exception ex) {
            System.err.println("Exception while retrieving secret values from AWS: " + ex.getMessage());
        }

        return secretsJsonMap;
    }
}
