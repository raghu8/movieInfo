The error indicates a mismatch in the `mappedBy` property between the `UserRole` and `SalesForceLead` entities. Specifically:

### Root Cause:
The `salesForceLeads` field in the `UserRole` entity has this mapping:
```java
@OneToMany(cascade = CascadeType.ALL, mappedBy = "leadReferrer")
List<SalesForceLead> salesForceLeads;
```
This suggests that the `SalesForceLead` entity has a field `leadReferrer` referencing the `UserRole` entity. However, the `SalesForceLead` entity is missing or incorrectly configured, and Hibernate expects the `leadReferrer` field in `SalesForceLead` to refer to `UserRole`.

---

### Solution:

1. **Verify `SalesForceLead` Entity:**
   Ensure that the `SalesForceLead` entity exists and has a field `leadReferrer` mapped to `UserRole`. Example:
   ```java
   @Entity
   @Table(name = "SalesForceLead")
   public class SalesForceLead {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       @Column(name = "ID")
       private Long id;

       @ManyToOne
       @JoinColumn(name = "LeadReferrer_ID", nullable = false)
       private UserRole leadReferrer;

       // Other fields...
   }
   ```

2. **Correct `mappedBy` Attribute:**
   Confirm that `mappedBy = "leadReferrer"` in `UserRole` matches the field name in `SalesForceLead`. If the field in `SalesForceLead` is named differently, update `mappedBy` accordingly.

3. **Validate the Database Schema:**
   Ensure the database schema matches the mapping, particularly:
   - `SalesForceLead` table has a foreign key column pointing to the `Roles` table (`UserRole`).

4. **Update the `CatalystDatasourceConfiguration`:**
   The issue lies in the configuration of the `EntityManagerFactory`. Ensure the entity package is correctly scanned:
   ```java
   @Primary
   @Bean
   public LocalContainerEntityManagerFactoryBean catalystEntityManagerFactory(
           EntityManagerFactoryBuilder builder) {
       return builder
               .dataSource(catalystDataSource())
               .packages("com.fiserv.catalyst.sales.regime.entity") // Ensure all entities are included
               .persistenceUnit("catalystPU")
               .build();
   }
   ```

5. **Enable Hibernate Validation Logging (Optional):**
   Add Hibernate logging to debug issues further:
   ```properties
   spring.jpa.show-sql=true
   spring.jpa.properties.hibernate.format_sql=true
   logging.level.org.hibernate=DEBUG
   ```

---

### Example Updated Entities:

#### `UserRole`
```java
@Entity
@Table(name = "Roles")
public class UserRole {
    @Id
    @Column(name = "ID")
    private Long id;

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "leadReferrer", orphanRemoval = true)
    private List<SalesForceLead> salesForceLeads;

    // Other fields...
}
```

#### `SalesForceLead`
```java
@Entity
@Table(name = "SalesForceLead")
public class SalesForceLead {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "LeadReferrer_ID", nullable = false)
    private UserRole leadReferrer;

    // Other fields...
}
```

---

### Steps After Changes:
1. **Rebuild the Project**: Clean and rebuild your project to ensure all mappings are updated.
2. **Validate Migrations**: If using Flyway or other migration tools, ensure the schema matches the updated entities.
3. **Test the Application**: Run the application and verify the changes resolve the issue.

Let me know if the issue persists or if you need further assistance!
